
Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

import java.util.Scanner;

public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int count = 0;

        // Iterate through each bit
        for (int i = 0; i < 32; i++) {
            // Check if the current bit is set (equals 1)
            if ((n & 1) == 1) {
                count++;
            }

            // Right shift n to check the next bit
            n >>= 1;
        }

        return count;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        Scanner scanner = new Scanner(System.in);

        // Example usage with user input
        System.out.print("Enter an integer: ");
        int userInput = scanner.nextInt();
        System.out.println("Hamming Weight: " + solution.hammingWeight(userInput));

        // Example usage with random input
        int randomInput = (int) (Math.random() * Integer.MAX_VALUE); // Generate a random positive integer
        System.out.println("Random Input: " + randomInput);
        System.out.println("Hamming Weight: " + solution.hammingWeight(randomInput));
        
        scanner.close();
    }
}
